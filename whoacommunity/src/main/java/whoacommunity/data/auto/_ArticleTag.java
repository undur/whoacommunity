package whoacommunity.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.UUID;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;

import whoacommunity.data.Article;
import whoacommunity.data.ArticleTag;
import whoacommunity.data.Tag;

/**
 * Class _ArticleTag was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ArticleTag extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<ArticleTag> SELF = PropertyFactory.createSelf(ArticleTag.class);

    public static final NumericIdProperty<Integer> ID_PK_PROPERTY = PropertyFactory.createNumericId("id", "ArticleTag", Integer.class);
    public static final String ID_PK_COLUMN = "id";

    public static final DateProperty<LocalDateTime> CREATION_DATE = PropertyFactory.createDate("creationDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> MODIFICATION_DATE = PropertyFactory.createDate("modificationDate", LocalDateTime.class);
    public static final BaseProperty<UUID> UNIQUE_ID = PropertyFactory.createBase("uniqueID", UUID.class);
    public static final EntityProperty<Article> ARTICLE = PropertyFactory.createEntity("article", Article.class);
    public static final EntityProperty<Tag> TAG = PropertyFactory.createEntity("tag", Tag.class);

    protected LocalDateTime creationDate;
    protected LocalDateTime modificationDate;
    protected UUID uniqueID;

    protected Object article;
    protected Object tag;

    public void setCreationDate(LocalDateTime creationDate) {
        beforePropertyWrite("creationDate", this.creationDate, creationDate);
        this.creationDate = creationDate;
    }

    public LocalDateTime creationDate() {
        beforePropertyRead("creationDate");
        return this.creationDate;
    }

    public void setModificationDate(LocalDateTime modificationDate) {
        beforePropertyWrite("modificationDate", this.modificationDate, modificationDate);
        this.modificationDate = modificationDate;
    }

    public LocalDateTime modificationDate() {
        beforePropertyRead("modificationDate");
        return this.modificationDate;
    }

    public void setUniqueID(UUID uniqueID) {
        beforePropertyWrite("uniqueID", this.uniqueID, uniqueID);
        this.uniqueID = uniqueID;
    }

    public UUID uniqueID() {
        beforePropertyRead("uniqueID");
        return this.uniqueID;
    }

    public void setArticle(Article article) {
        setToOneTarget("article", article, true);
    }

    public Article article() {
        return (Article)readProperty("article");
    }

    public void setTag(Tag tag) {
        setToOneTarget("tag", tag, true);
    }

    public Tag tag() {
        return (Tag)readProperty("tag");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "creationDate":
                return this.creationDate;
            case "modificationDate":
                return this.modificationDate;
            case "uniqueID":
                return this.uniqueID;
            case "article":
                return this.article;
            case "tag":
                return this.tag;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "creationDate":
                this.creationDate = (LocalDateTime)val;
                break;
            case "modificationDate":
                this.modificationDate = (LocalDateTime)val;
                break;
            case "uniqueID":
                this.uniqueID = (UUID)val;
                break;
            case "article":
                this.article = val;
                break;
            case "tag":
                this.tag = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.creationDate);
        out.writeObject(this.modificationDate);
        out.writeObject(this.uniqueID);
        out.writeObject(this.article);
        out.writeObject(this.tag);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.creationDate = (LocalDateTime)in.readObject();
        this.modificationDate = (LocalDateTime)in.readObject();
        this.uniqueID = (UUID)in.readObject();
        this.article = in.readObject();
        this.tag = in.readObject();
    }

}
