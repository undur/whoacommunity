package whoacommunity.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.UUID;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.exp.property.StringProperty;

import whoacommunity.data.Channel;
import whoacommunity.data.Message;
import whoacommunity.data.User;

/**
 * Class _Message was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Message extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<Message> SELF = PropertyFactory.createSelf(Message.class);

    public static final NumericIdProperty<Integer> ID_PK_PROPERTY = PropertyFactory.createNumericId("id", "Message", Integer.class);
    public static final String ID_PK_COLUMN = "id";

    public static final DateProperty<LocalDateTime> CREATION_DATE = PropertyFactory.createDate("creationDate", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> DATE_TIME = PropertyFactory.createDate("dateTime", LocalDateTime.class);
    public static final DateProperty<LocalDateTime> MODIFICATION_DATE = PropertyFactory.createDate("modificationDate", LocalDateTime.class);
    public static final StringProperty<String> SLACK_SUBTYPE = PropertyFactory.createString("slackSubtype", String.class);
    public static final StringProperty<String> SLACK_TYPE = PropertyFactory.createString("slackType", String.class);
    public static final StringProperty<String> TEXT = PropertyFactory.createString("text", String.class);
    public static final BaseProperty<UUID> UNIQUE_ID = PropertyFactory.createBase("uniqueID", UUID.class);
    public static final EntityProperty<Channel> CHANNEL = PropertyFactory.createEntity("channel", Channel.class);
    public static final EntityProperty<User> USER = PropertyFactory.createEntity("user", User.class);

    protected LocalDateTime creationDate;
    protected LocalDateTime dateTime;
    protected LocalDateTime modificationDate;
    protected String slackSubtype;
    protected String slackType;
    protected String text;
    protected UUID uniqueID;

    protected Object channel;
    protected Object user;

    public void setCreationDate(LocalDateTime creationDate) {
        beforePropertyWrite("creationDate", this.creationDate, creationDate);
        this.creationDate = creationDate;
    }

    public LocalDateTime creationDate() {
        beforePropertyRead("creationDate");
        return this.creationDate;
    }

    public void setDateTime(LocalDateTime dateTime) {
        beforePropertyWrite("dateTime", this.dateTime, dateTime);
        this.dateTime = dateTime;
    }

    public LocalDateTime dateTime() {
        beforePropertyRead("dateTime");
        return this.dateTime;
    }

    public void setModificationDate(LocalDateTime modificationDate) {
        beforePropertyWrite("modificationDate", this.modificationDate, modificationDate);
        this.modificationDate = modificationDate;
    }

    public LocalDateTime modificationDate() {
        beforePropertyRead("modificationDate");
        return this.modificationDate;
    }

    public void setSlackSubtype(String slackSubtype) {
        beforePropertyWrite("slackSubtype", this.slackSubtype, slackSubtype);
        this.slackSubtype = slackSubtype;
    }

    public String slackSubtype() {
        beforePropertyRead("slackSubtype");
        return this.slackSubtype;
    }

    public void setSlackType(String slackType) {
        beforePropertyWrite("slackType", this.slackType, slackType);
        this.slackType = slackType;
    }

    public String slackType() {
        beforePropertyRead("slackType");
        return this.slackType;
    }

    public void setText(String text) {
        beforePropertyWrite("text", this.text, text);
        this.text = text;
    }

    public String text() {
        beforePropertyRead("text");
        return this.text;
    }

    public void setUniqueID(UUID uniqueID) {
        beforePropertyWrite("uniqueID", this.uniqueID, uniqueID);
        this.uniqueID = uniqueID;
    }

    public UUID uniqueID() {
        beforePropertyRead("uniqueID");
        return this.uniqueID;
    }

    public void setChannel(Channel channel) {
        setToOneTarget("channel", channel, true);
    }

    public Channel channel() {
        return (Channel)readProperty("channel");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User user() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "creationDate":
                return this.creationDate;
            case "dateTime":
                return this.dateTime;
            case "modificationDate":
                return this.modificationDate;
            case "slackSubtype":
                return this.slackSubtype;
            case "slackType":
                return this.slackType;
            case "text":
                return this.text;
            case "uniqueID":
                return this.uniqueID;
            case "channel":
                return this.channel;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "creationDate":
                this.creationDate = (LocalDateTime)val;
                break;
            case "dateTime":
                this.dateTime = (LocalDateTime)val;
                break;
            case "modificationDate":
                this.modificationDate = (LocalDateTime)val;
                break;
            case "slackSubtype":
                this.slackSubtype = (String)val;
                break;
            case "slackType":
                this.slackType = (String)val;
                break;
            case "text":
                this.text = (String)val;
                break;
            case "uniqueID":
                this.uniqueID = (UUID)val;
                break;
            case "channel":
                this.channel = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.creationDate);
        out.writeObject(this.dateTime);
        out.writeObject(this.modificationDate);
        out.writeObject(this.slackSubtype);
        out.writeObject(this.slackType);
        out.writeObject(this.text);
        out.writeObject(this.uniqueID);
        out.writeObject(this.channel);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.creationDate = (LocalDateTime)in.readObject();
        this.dateTime = (LocalDateTime)in.readObject();
        this.modificationDate = (LocalDateTime)in.readObject();
        this.slackSubtype = (String)in.readObject();
        this.slackType = (String)in.readObject();
        this.text = (String)in.readObject();
        this.uniqueID = (UUID)in.readObject();
        this.channel = in.readObject();
        this.user = in.readObject();
    }

}
