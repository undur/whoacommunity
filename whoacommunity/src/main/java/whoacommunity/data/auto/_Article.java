package whoacommunity.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.apache.cayenne.PersistentObject;
import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericIdProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.SelfProperty;
import org.apache.cayenne.exp.property.StringProperty;

import whoacommunity.data.Article;
import whoacommunity.data.ArticleTag;

/**
 * Class _Article was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Article extends PersistentObject {

    private static final long serialVersionUID = 1L;

    public static final SelfProperty<Article> SELF = PropertyFactory.createSelf(Article.class);

    public static final NumericIdProperty<Integer> ID_PK_PROPERTY = PropertyFactory.createNumericId("id", "Article", Integer.class);
    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> CONTENT = PropertyFactory.createString("content", String.class);
    public static final DateProperty<LocalDateTime> CREATION_DATE = PropertyFactory.createDate("creationDate", LocalDateTime.class);
    public static final DateProperty<LocalDate> DATE = PropertyFactory.createDate("date", LocalDate.class);
    public static final StringProperty<String> FORMAT_CODE = PropertyFactory.createString("formatCode", String.class);
    public static final DateProperty<LocalDateTime> MODIFICATION_DATE = PropertyFactory.createDate("modificationDate", LocalDateTime.class);
    public static final StringProperty<String> TITLE = PropertyFactory.createString("title", String.class);
    public static final BaseProperty<UUID> UNIQUE_ID = PropertyFactory.createBase("uniqueID", UUID.class);
    public static final ListProperty<ArticleTag> ARTICLE_TAGS = PropertyFactory.createList("articleTags", ArticleTag.class);

    protected String content;
    protected LocalDateTime creationDate;
    protected LocalDate date;
    protected String formatCode;
    protected LocalDateTime modificationDate;
    protected String title;
    protected UUID uniqueID;

    protected Object articleTags;

    public void setContent(String content) {
        beforePropertyWrite("content", this.content, content);
        this.content = content;
    }

    public String content() {
        beforePropertyRead("content");
        return this.content;
    }

    public void setCreationDate(LocalDateTime creationDate) {
        beforePropertyWrite("creationDate", this.creationDate, creationDate);
        this.creationDate = creationDate;
    }

    public LocalDateTime creationDate() {
        beforePropertyRead("creationDate");
        return this.creationDate;
    }

    public void setDate(LocalDate date) {
        beforePropertyWrite("date", this.date, date);
        this.date = date;
    }

    public LocalDate date() {
        beforePropertyRead("date");
        return this.date;
    }

    public void setFormatCode(String formatCode) {
        beforePropertyWrite("formatCode", this.formatCode, formatCode);
        this.formatCode = formatCode;
    }

    public String formatCode() {
        beforePropertyRead("formatCode");
        return this.formatCode;
    }

    public void setModificationDate(LocalDateTime modificationDate) {
        beforePropertyWrite("modificationDate", this.modificationDate, modificationDate);
        this.modificationDate = modificationDate;
    }

    public LocalDateTime modificationDate() {
        beforePropertyRead("modificationDate");
        return this.modificationDate;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String title() {
        beforePropertyRead("title");
        return this.title;
    }

    public void setUniqueID(UUID uniqueID) {
        beforePropertyWrite("uniqueID", this.uniqueID, uniqueID);
        this.uniqueID = uniqueID;
    }

    public UUID uniqueID() {
        beforePropertyRead("uniqueID");
        return this.uniqueID;
    }

    public void addToArticleTags(ArticleTag obj) {
        addToManyTarget("articleTags", obj, true);
    }

    public void removeFromArticleTags(ArticleTag obj) {
        removeToManyTarget("articleTags", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ArticleTag> articleTags() {
        return (List<ArticleTag>)readProperty("articleTags");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "content":
                return this.content;
            case "creationDate":
                return this.creationDate;
            case "date":
                return this.date;
            case "formatCode":
                return this.formatCode;
            case "modificationDate":
                return this.modificationDate;
            case "title":
                return this.title;
            case "uniqueID":
                return this.uniqueID;
            case "articleTags":
                return this.articleTags;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "content":
                this.content = (String)val;
                break;
            case "creationDate":
                this.creationDate = (LocalDateTime)val;
                break;
            case "date":
                this.date = (LocalDate)val;
                break;
            case "formatCode":
                this.formatCode = (String)val;
                break;
            case "modificationDate":
                this.modificationDate = (LocalDateTime)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            case "uniqueID":
                this.uniqueID = (UUID)val;
                break;
            case "articleTags":
                this.articleTags = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.content);
        out.writeObject(this.creationDate);
        out.writeObject(this.date);
        out.writeObject(this.formatCode);
        out.writeObject(this.modificationDate);
        out.writeObject(this.title);
        out.writeObject(this.uniqueID);
        out.writeObject(this.articleTags);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.content = (String)in.readObject();
        this.creationDate = (LocalDateTime)in.readObject();
        this.date = (LocalDate)in.readObject();
        this.formatCode = (String)in.readObject();
        this.modificationDate = (LocalDateTime)in.readObject();
        this.title = (String)in.readObject();
        this.uniqueID = (UUID)in.readObject();
        this.articleTags = in.readObject();
    }

}
